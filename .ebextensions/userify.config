files:

  "/opt/userify/creds.py" :
    mode: "000600"
    owner: root
    group: root
    content: |
      # Userify Credentials Configuration
      # This file should be owned and readable only by root.

      # This file sourced by both Python and Bash scripts, so please ensure changes
      # are loadable by each.

      # Instantly move this server to a different server group, even a server group
      # in a different company, by replacing these with the credentials for the new
      # server group.

      company="USERIFY_COMPANY"
      project="USERIFY_PROJECT"

      api_id= "USERIFY_API_ID"
      api_key="USERIFY_API_KEY"


  "/opt/userify/userify_config.py":
    mode: "000600"
    owner: root
    group: root
    content: |
      # Userify Shim Configuration

      company="USERIFY_COMPANY"
      project="USERIFY_PROJECT"

      # This file sourced by both Python and Bash scripts, so please ensure changes
      # are loadable by each.

      # Enable this for additional verbosity in /var/log/userify-shim.log
      debug=0

      # Enable this to not actually make changes.
      # This can also be used to temporary disable the shim.
      dry_run=0

      # Userify Enterprise/Pro licenses
      shim_host="USERIFY_SHIM_HOST"
      static_host="USERIFY_STATIC_HOST"
      self_signed="USERIFY_SELF_SIGNED"


  "/opt/userify/uninstall.sh" :
    mode: "000700"
    owner: root
    group: root
    content: |
      #! /bin/sh +e
      # --------------------------------------------
      #
      # uninstall.sh
      # This script uninstalls the entire Userify agent and kills
      # off any shim processes that are still running.
      #
      # --------------------------------------------
      # Copyright (c) 2017 Userify Corp.
      echo
      echo
      echo -------------------------------------------------------------
      echo "Removing Userify..."
      if [ "$(id -u)" != "0" ]; then
          echo 'Need to have root privileges.'
          exit 1;
      fi
      # Debian, Ubuntu, RHEL:
      sed -i "s/\/opt\/userify\/shim.sh \&//" \
          /etc/rc.local 2>/dev/null
      # SUSE:
      sed -i "s/\/opt\/userify\/shim.sh \&//" \
          /etc/init.d/after.local 2>/dev/null
      # Fedora:
      # systemctl disable userify-shim.service 2>/dev/null
      # rm -f /etc/systemd/system/userify-shim.service 2>/dev/null
      # Wipe out entire /opt/userify directory
      rm -Rf /opt/userify/
      # Kill off remaining shim processes
      pkill shim. > /dev/null 2>&1
      echo Finished!
      echo Userify has been removed, but the user accounts it created still
      echo exist and no changes have been made to them.
      echo You can now install a new Userify shim as desired.
      echo -------------------------------------------------------------
      echo
      echo


  "/opt/userify/shim.sh":
    mode: "000700"
    owner: root
    group: root
    content: |
      #! /bin/bash +e
      # --------------------------------------------
      #
      # shim.sh
      # This is the script that actually calls
      # shim.py.
      #
      # --------------------------------------------
      # Copyright (c) 2017 Userify Corp.
      # try it out by hand for troubleshooting.
      # as root, paste below until you get to the line after curl
      # starting with 2>. Don't paste that line or anything after.
      static_host="static.userify.com"
      source /opt/userify/userify_config.py
      [ "x$self_signed" == "x1" ] && SELFSIGNED='k' || SELFSIGNED=''
      # keep userify-shim.log from getting too big
      touch /var/log/userify-shim.log
      [[ $(find /var/log/userify-shim.log -type f -size +524288c 2>/dev/null) ]] && \
          mv -f /var/log/userify-shim.log /var/log/userify-shim.log.1
      touch /var/log/userify-shim.log
      chmod -R 600 /var/log/userify-shim.log
      # kick off shim.py
      [ -z "$PYTHON" ] && PYTHON="$(command -v python)"
      curl -L1 -f${SELFSIGNED}Ss https://$static_host/shim.py | $PYTHON -u \
          2>&1 >> /var/log/userify-shim.log
      if [ $? != 0 ]; then
          # extra backoff in event of failure,
          # between one and seven minutes
          sleep $(($RANDOM%360+60))
      fi
      sleep 5
      # call myself. fork before exiting.
      /opt/userify/shim.sh &

  "/home/ec2-user/userify_installer.sh":
    mode: "000700"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      set +e
      . /opt/elasticbeanstalk/support/envvars
      CREDS=/opt/userify/creds.py
      CONF=/opt/userify/userify_config.py  
      sed -i "s/api_id=.*/api_id=\"$USERIFY_API_ID\"/g" $CREDS
      sed -i "s/api_key=.*/api_key=\"$USERIFY_API_KEY\"/g" $CREDS
      sed -i "s/company=.*/company=\"$USERIFY_COMPANY\"/g" $CREDS
      sed -i "s/project=.*/project=\"$USERIFY_PROJECT\"/g" $CREDS
      sed -i "s/company=.*/company=\"$USERIFY_COMPANY\"/g" $CONF
      sed -i "s/project=.*/project=\"$USERIFY_PROJECT\"/g" $CONF
      sed -i "s/shim_host=.*/shim_host=\"$USERIFY_SHIM_HOST\"/g" $CONF
      sed -i "s/static_host=.*/static_host=\"$USERIFY_STATIC_HOST\"/g" $CONF
      sed -i "s/self_signed=.*/self_signed=\"$USERIFY_SELF_SIGNED\"/g" $CONF
      sed -i "s/^ *exit 0.*/# &/" /etc/rc.local 2>/dev/null
      # most Linux versions can manage with a line added to rc.local:
      if [ -f /etc/rc.d/rc.local ]; then
          # RHEL7/Fedora/Amazon Linux
          distro="Linux"
          fname=/etc/rc.d/rc.local
      elif [ -f /etc/rc.local ]; then
          distro="Linux"
          fname=/etc/rc.local
      elif [ -f /etc/init.d/after.local ]; then
          distro="SUSE"
          fname=/etc/init.d/after.local
      else
          exit 1
      fi
      # actually set up the startup
      if [ "$distro" != "Fedora" ]; then
          # remove any existing lines:
          set +e
              sed -i "s/\/opt\/userify\/shim.sh \&//" "$fname" 2>/dev/null
          set -e
      fi
      [ -f /var/log/userify-shim.log ] && rm /var/log/userify-shim.log
      touch /var/log/userify-shim.log
      set +e
      chmod +x /etc/rc.local 2>/dev/null
      # RHEL7:
      chmod +x /etc/rc.d/rc.local 2>/dev/null
      # actually launch the shim by double-forking:
      (/opt/userify/shim.sh &) &
      sleep 3
      touch /opt/userify/userify.done

container_commands:
  50_set_up_userify:
    command: /home/ec2-user/userify_installer.sh
    test: "[ ! -f /opt/userify/userify.done ]"
